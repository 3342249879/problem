package org.zalando.problem;

/*
 * ⁣​
 * Problem
 * ⁣⁣
 * Copyright (C) 2015 Zalando SE
 * ⁣⁣
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ​⁣
 */

import com.google.common.base.MoreObjects;
import com.google.common.collect.ImmutableMap;

import javax.annotation.concurrent.Immutable;
import javax.ws.rs.core.Response.StatusType;
import java.net.URI;
import java.util.Optional;

/**
 * @see <a href="https://tools.ietf.org/html/draft-nottingham-http-problem-07">Problem Details for HTTP APIs</a>
 */
@Immutable
// TODO document that type, title and status are *NOT* optional, in contrast to the spec
public interface Problem {

    /**
     * An absolute URI that identifies the problem type. When dereferenced,
     * it SHOULD provide human-readable documentation for the problem type
     * (e.g., using HTML). When this member is not present, its value is
     * assumed to be "about:blank".
     *
     * @return an absolute URI that identifies this problem's type
     */
    URI getType();

    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT
     * change from occurrence to occurrence of the problem, except for
     * purposes of localisation.
     *
     * @return a short, human-readable summary of this problem
     */
    String getTitle();

    /**
     * The HTTP status code generated by the origin server for this
     * occurrence of the problem.
     *
     * @return the HTTP status code
     */
    StatusType getStatus();

    /**
     * A human readable explanation specific to this occurrence of the problem.
     *
     * @return A human readable explaination of this problem
     */
    default Optional<String> getDetail() {
        return Optional.empty();
    }

    /**
     * An absolute URI that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     *
     * @return an absolute URI that identifies this specific problem
     */
    default Optional<URI> getInstance() {
        return Optional.empty();
    }

    /**
     * Optional, additional attributes of the problem. Implementations can choose to ignore this in favor of concrete,
     * typed fields.
     *
     * @return additional parameters
     */
    default ImmutableMap<String, Object> getParameters() {
        return ImmutableMap.of();
    }

    /**
     * Specification by example:
     * <p>
     * <pre>{@code
     *   // Returns "http://httpstatus.es/404{}"
     *   Problem.create(NOT_FOUND).toString();
     * <p>
     *   // Returns "http://httpstatus.es/404{Order 123}"
     *   Problem.create(NOT_FOUND, "Order 123").toString();
     * <p>
     *   // Returns "http://httpstatus.es/404{Order 123, instance=https://example.org/"}
     *   Problem.create(NOT_FOUND, "Order 123", URI.create("https://example.org/").toString();
     * }</pre>
     *
     * @return a string representation of this problem
     */
    default String defaultToString() {
        final MoreObjects.ToStringHelper helper = MoreObjects.toStringHelper(getType().toString())
                .omitNullValues()
                .addValue(getStatus().getStatusCode())
                .addValue(getTitle())
                .addValue(getDetail().orElse(null))
                .add("instance", getInstance().orElse(null));

        getParameters().forEach(helper::add);

        return helper.toString();
    }

    static ProblemBuilder builder() {
        return new ProblemBuilder();
    }

    /**
     * TODO document
     * @param status
     * @return
     * @see <a href="http://httpstatus.es/">http://httpstatus.es/</a>
     */
    static ThrowableProblem valueOf(final StatusType status) {
        return GenericProblems.create(status).build();
    }

    /**
     * TODO document
     * @param status
     * @param detail
     * @return
     * @see <a href="http://httpstatus.es/">http://httpstatus.es/</a>
     */
    static ThrowableProblem valueOf(final StatusType status, final String detail) {
        return GenericProblems.create(status).withDetail(detail).build();
    }

}
